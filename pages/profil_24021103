import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { getFirestore, doc, setDoc, getDoc } from "firebase/firestore";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { app } from "../lib/firebase";
import { useRouter } from 'next/router';

const db = getFirestore(app);
const storage = getStorage(app);

async function updateUserProfile(userId: string, updatedData: any) {
  try {
    await setDoc(doc(db, "users", userId), updatedData, { merge: true });
  } catch (error) {
    console.error("Erreur lors de la mise à jour du profil :", error);
  }
}

const ProfilePage: React.FC = () => {
  const { user } = useAuth();
  const router = useRouter();
  const ages = Array.from({ length: 82 }, (_, i) => i + 18); // 18 à 99
  const [loading, setLoading] = useState(true);
  const [videoFile, setVideoFile] = useState<File | null>(null);
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [fileCounter, setFileCounter] = useState(10);

  const [profileData, setProfileData] = useState({
    firstName: '',
    age: '',
    city: '',
    gender: '',
    relationshipType: '',
    partnerGender: '',
    partnerAgeRange: { min: 18, max: 99 },
    distance: 5,
    email: user?.email || '',
    videoURL: '',
    imageURL: '',
  });

  useEffect(() => {
    const fetchProfileData = async () => {
      if (user) {
        try {
          const docRef = doc(db, "users", user.uid);
          const docSnap = await getDoc(docRef);
          if (docSnap.exists()) {
            setProfileData(docSnap.data() as typeof profileData);
          }
        } catch (error) {
          console.error("Erreur lors de la récupération du profil :", error);
        } finally {
          setLoading(false);
        }
      }
    };
    fetchProfileData();
  }, [user]);

  const handleFileUpload = async (file: File, path: string) => {
    try {
      const storageRef = ref(storage, path);
      await uploadBytes(storageRef, file);
      const downloadURL = await getDownloadURL(storageRef);
      return downloadURL;
    } catch (error) {
      console.error("Erreur lors de l'upload ou de la récupération de l'URL :", error);
      throw error;
    }
  };

  const handleVideoChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      setVideoFile(event.target.files[0]);
    }
  };

  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      const file = event.target.files[0];
      setImageFile(file);
    }
  };

  const openModal = () => {
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
  };

  const handleSaveProfile = async (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    if (user) {
      try {
        if (videoFile) {
          const videoURL = await handleFileUpload(videoFile, `videos/${user.uid}/${videoFile.name}`);
          profileData.videoURL = videoURL;
        }

        if (imageFile) {
          const imageName = `teaseyou-${fileCounter}.webp`;
          const imageURL = await handleFileUpload(imageFile, `images/profiles/${user.uid}/${imageName}`);
          profileData.imageURL = imageURL;
          setFileCounter(fileCounter + 1);
        }

        await updateUserProfile(user.uid, profileData);
        router.push('/'); // Redirection après sauvegarde
      } catch (error) {
        console.error('Erreur lors de l\'enregistrement du profil:', error);
      }
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="min-h-screen flex flex-col p-6 pb-40 bg-gray-100">
      {/* Header avec logo */}
      <div className="flex justify-between items-center mb-6">
        <img src="/Logo-TeaseYou-256px-transparent.png" alt="Logo TeaseYou" className="w-20 h-20" />
        <h1 className="text-3xl font-bold text-center text-[#FF5F6D]">Mon Profil</h1>
      </div>

      {/* Formulaire de profil */}
      <form className="space-y-6">
        {/* Email en lecture seule */}
        <div className="mt-6 bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold text-[#FF5F6D] mb-4">Email (non modifiable)</h2>
          <input
            type="email"
            className="input input-bordered w-full bg-gray-50 border-gray-300 text-[#E63946]"
            value={profileData.email}
            readOnly
          />
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold text-[#FF5F6D] mb-4">Informations Personnelles</h2>
          <div className="grid grid-cols-1 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Prénom</label>
              <input
                type="text"
                className="input input-bordered w-full bg-gray-50 border-gray-300 text-[#E63946]"
                value={profileData.firstName}
                onChange={(e) => setProfileData({ ...profileData, firstName: e.target.value })}
                required
              />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">Âge</label>
                <input
                  type="number"
                  className="input input-bordered w-full bg-gray-50 border-gray-300 text-[#E63946]"
                  value={profileData.age}
                  onChange={(e) => setProfileData({ ...profileData, age: e.target.value })}
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Sexe</label>
                <select
                  className="select select-bordered w-full bg-gray-50 border-gray-300 text-gray-700"
                  value={profileData.gender}
                  onChange={(e) => setProfileData({ ...profileData, gender: e.target.value })}
                >
                  <option value="">---</option>
                  <option>Homme</option>
                  <option>Femme</option>
                  <option>Autre</option>
                </select>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Ville</label>
              <input
                type="text"
                className="input input-bordered w-full bg-gray-50 border-gray-300 text-[#E63946]"
                value={profileData.city}
                onChange={(e) => setProfileData({ ...profileData, city: e.target.value })}
                required
              />
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold text-[#FF5F6D] mb-4">Préférences de Recherche</h2>
          <div className="grid grid-cols-1 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Type de relation recherchée</label>
              <select
                className="select select-bordered w-full bg-gray-50 border-gray-300 text-gray-700"
                value={profileData.relationshipType}
                onChange={(e) => setProfileData({ ...profileData, relationshipType: e.target.value })}
              >
                <option value="">---</option>
                <option>Relation amoureuse / sérieuse</option>
                <option>Rencontre casual / sans prise de tête</option>
                <option>Amitié</option>
                <option>Autre</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Genre du partenaire recherché</label>
              <select
                className="select select-bordered w-full bg-gray-50 border-gray-300 text-gray-700"
                value={profileData.partnerGender}
                onChange={(e) => setProfileData({ ...profileData, partnerGender: e.target.value })}
              >
                <option value="">---</option>
                <option>Homme</option>
                <option>Femme</option>
                <option>Non-binaire</option>
                <option>Peu importe</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Tranche d'âge du partenaire recherché</label>
              <div className="flex space-x-2">
                <select
                  className="select select-bordered w-1/2 bg-gray-50 border-gray-300 text-gray-700"
                  value={profileData.partnerAgeRange.min}
                  onChange={(e) =>
                    setProfileData({
                      ...profileData,
                      partnerAgeRange: {
                        ...profileData.partnerAgeRange,
                        min: parseInt(e.target.value),
                      },
                    })
                  }
                >
                  {ages.map(age => (
                    <option key={age} value={age}>{age}</option>
                  ))}
                </select>
                <select
                  className="select select-bordered w-1/2 bg-gray-50 border-gray-300 text-gray-700"
                  value={profileData.partnerAgeRange.max}
                  onChange={(e) =>
                    setProfileData({
                      ...profileData,
                      partnerAgeRange: {
                        ...profileData.partnerAgeRange,
                        max: parseInt(e.target.value),
                      },
                    })
                  }
                >
                  {ages.map(age => (
                    <option key={age} value={age}>{age}</option>
                  ))}
                </select>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Distance géographique</label>
              <div className="flex items-center space-x-2">
                <input
                  type="range"
                  min="5"
                  max="999"
                  value={profileData.distance}
                  onChange={(e) =>
                    setProfileData({ ...profileData, distance: Number(e.target.value) })
                  }
                  className="range w-2/3"
                  style={{ background: '#E63946' }}
                />
                <span className="text-sm font-bold text-gray-700 pl-5">
                  {profileData.distance} km
                </span>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold text-[#FF5F6D] mb-4">Médias</h2>
          <div className="grid grid-cols-1 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Mon Teaser</label>
              <input
                type="file"
                accept="video/mp4,video/x-m4v,video/*"
                onChange={handleVideoChange}
                className="file-input w-full bg-gray-50 border-gray-300 focus:border-[#E63946] focus:ring-[#E63946]"
              />
              {videoFile && (
                <button
                  type="button"
                  onClick={openModal}
                  className="btn btn-primary mt-2"
                >
                  Voir le Teaser
                </button>
              )}
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Photo de Profil</label>
              
              <input
                type="file"
                accept="image/*"
                onChange={handleImageChange}
                className="file-input w-full bg-gray-50 border-gray-300 focus:border-[#E63946] focus:ring-[#E63946]"
              />
            </div>
          </div>
        </div>

        <div className="flex justify-between mt-6">
          <div className="flex space-x-4">
            <button className="btn btn-circle bg-gray-300 text-white">
              <span className="material-icons">flight</span>
            </button>
            <button className="btn btn-circle bg-gray-300 text-white">
              <span className="material-icons">delete_forever</span>
            </button>
          </div>
          <button
            className="btn btn-circle bg-[#E63946] text-white"
            onClick={handleSaveProfile}
          >
            <span className="material-icons">check</span>
          </button>
        </div>
      </form>

      {/* Modal pour la vidéo */}
      {isModalOpen && videoFile && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
          <div className="relative">
            <button
              onClick={closeModal}
              className="absolute top-0 right-0 m-4 text-white text-2xl"
            >
              ×
            </button>
            <video controls className="max-w-full max-h-full">
              <source src={URL.createObjectURL(videoFile)} type={videoFile.type} />
              Votre navigateur ne supporte pas la lecture de vidéos.
            </video>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProfilePage;
